from typing import (
    Any,
    BinaryIO,
    ClassVar,
    Dict,
    Generator,
    Iterable,
    List,
    Optional,
    Pattern,
    Set,
    Tuple,
    Union,
)
from lxml.etree import _Element, XMLParser  # type: ignore
from logging import Logger

from .artifact import Artifact
from .client import MavenClient

EMPTY_POM: str = ...
POM_NAMESPACE: str = ...
POM: str = ...
POM_NAMESPACE_LEN: int = ...
POM_PARSER: XMLParser
STRIP_NAMESPACE_RE: Pattern = ...
log: Logger = ...

class Pom(Artifact):
    RANGE_CHARS: ClassVar[Tuple[str, str, str, str]] = ...
    _client: MavenClient = ...
    _dep_mgmt: Union[Dict, None] = ...
    _dependencies: Union[Dict, None] = ...
    _parent: Union["Pom", None] = ...
    _pom_data: _Element = ...
    _properties: Union[Dict, None] = ...
    dependencies: property = ...
    dependency_management: property = ...
    parent: property = ...
    pom_data: property = ...
    properties: property = ...
    def __init__(
        self,
        coordinate: str,
        client: Optional[MavenClient] = None,
        pom_data: Optional[bytes] = None,
    ) -> None: ...
    def _get_dependencies(self) -> Dict: ...
    def _get_dependency_management(self) -> Dict: ...
    def _get_parent(self) -> Union[Pom, None]: ...
    def _get_pom_data(self) -> _Element: ...
    def _get_properties(self) -> Dict: ...
    def _find_deps(self, elem: Optional[_Element] = None) -> Dict: ...
    def _find_dependency_management(self, elem: Optional[_Element] = None) -> Dict: ...
    def _find_import_deps(self) -> Dict: ...
    def _find_prerequisites(self, elem: Optional[_Element] = None) -> Dict: ...
    def _find_profiles(self, elem: Optional[_Element] = None) -> List[str]: ...
    def _find_properties(self, elem: Optional[_Element] = None) -> Dict: ...
    def _find_relocations(self, elem: Optional[_Element] = None) -> Dict: ...
    def _pom_factory(self, group: str, artifact: str, version: str) -> Pom: ...
    def _replace_properties(self, text: str, properties: Optional[Dict]) -> str: ...
    def get_dependencies(self) -> Set[Tuple[str, str]]: ...
    def get_build_dependencies(self) -> Set[Tuple]: ...
    def iter_dependencies(self) -> Generator: ...
    def iter_build_dependencies(self) -> Generator: ...
    def pick_version(self, spec: str, artifacts: Iterable[Artifact]) -> str: ...
    @classmethod
    def parse(
        cls, coordinate: str, source: BinaryIO, client: Optional[MavenClient] = None
    ) -> "Pom": ...
    @classmethod
    def fromstring(
        cls, coordinate: str, text: str, client: Optional[MavenClient] = None
    ) -> "Pom": ...

def _find(elem: _Element, tag: str) -> _Element: ...
def _findall(elem: _Element, tag: str) -> List[_Element]: ...
def _findtext(elem: _Element, tag: str) -> str: ...
