from typing import Any, Dict, List, Union, BinaryIO, Generator, Optional, Tuple
import logging
import types

from requests import Response

from .artifact import Artifact
from .pom import Pom

log: logging.Logger

class Struct:
    _json: Union[Dict, None]
    content: Any
    json: property
    status_code: Union[int, None]
    def __init__(self) -> None: ...
    def __enter__(self) -> BinaryIO: ...
    def __exit__(self) -> None: ...
    def _get_json(self) -> Dict: ...
    def iter_content(self, size: Optional[int]) -> Generator: ...

class Cache:
    def __init__(self, cacheDir: Optional[str]) -> None: ...
    def _gen_key(self, method: str, uri: str, query_params: Dict[str, str]) -> str: ...
    def _gen_hash(self, key: str) -> str: ...
    def _gen_paths(self, hash: str) -> Tuple[str, str]: ...
    def _get(self, hpath: str, dhpath: str) -> Response: ...
    def cache(
        self,
        res: Response,
        method: str,
        uri: str,
        query_params: Optional[Dict[str, str]],
    ) -> Response: ...
    def get(
        self, method: str, uri: str, query_params: Optional[Dict[str, str]]
    ) -> Response: ...

class MavenClient:
    _repos: List[AbstractRepository]
    def __init__(self, *urls: str) -> None: ...
    def find_artifacts(self, coordinate: str) -> List[Artifact]: ...
    def get_artifact(self, coordinate: str) -> Artifact: ...
    def get_metadata(self, coordinate: str) -> Pom: ...

class AbstractRepository:
    _url: str
    def __init__(self, url: str) -> None: ...
    def _exists(self, path: str) -> bool: ...
    def _listdir(self, path: str) -> List[str]: ...
    def _open(self, path: str) -> BinaryIO: ...
    def exists(self, path: str) -> bool: ...
    def get_versions(self, coordinate: str) -> List[Artifact]: ...
    def listdir(self, path: str) -> List[str]: ...
    def open(self, path: str) -> BinaryIO: ...

class HttpRepository(AbstractRepository):
    def __init__(
        self, url: str, username: Optional[str] = None, password: Optional[str] = None
    ) -> None: ...
    def _get(self, uri: str, **kwargs: Any) -> Response: ...
    def _head(self, uri: str, **kwargs: Any) -> Response: ...
    def _request(
        self, method: str, uri: str, json: bool = False, **kwargs: Any
    ) -> Response: ...

class LocalRepository(AbstractRepository):
    def _join(self, *args: str) -> str: ...
