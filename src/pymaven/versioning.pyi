from typing import Any, Dict, List, Iterable, Optional, Sequence, Tuple, TypeVar, Union

EXCLUSIVE_CLOSE: str = ...
EXCLUSIVE_OPEN: str = ...
INCLUSIVE_CLOSE: str = ...
INCLUSIVE_OPEN: str = ...

QUALIFIERS: List[str] = ...
ALIASES: Dict[str, str]

def list2tuple(l: List[Any]) -> Tuple[Any]: ...

class Restriction:
    lower_bound: Union[Version, None] = ...
    lower_bound_inclusive: bool = ...
    upper_bound: Union[Version, None] = ...
    upper_bound_inclusive: bool = ...
    def __cmp__(self, other: Any) -> int: ...
    def __contains__(self, version: Version) -> bool: ...
    def __init__(self, spec: Optional[str] = ...) -> None: ...
    @classmethod
    def fromstring(cls, spec: str) -> "Restriction": ...

C = Union[int, str, List, Tuple]

class Version:
    _parsed: Tuple = ...
    _unparsed: str = ...
    def __cmp__(self, other: Any) -> int: ...
    def __init__(self, version: str) -> None: ...
    def _compare(self, this: C, other: C) -> int: ...
    def _int_compare(self, this: int, other: C) -> int: ...
    def _list_compare(self, this: Union[List, Tuple], other: C) -> int: ...
    def _new_list(self, li: List) -> List: ...
    def _normalize(self, l: List) -> List: ...
    def _parse_buffer(self, buf: str, followed_by_digit: bool = ...) -> str: ...
    def _string_compare(self, this: str, other: C) -> int: ...
    def _string_value(self, s: str) -> str: ...
    @classmethod
    def fromstring(cls, spec: str) -> "Version": ...

class VersionRange:
    restrictions: Tuple[Restriction]
    version: Version
    def __cmp__(self, other: Any) -> int: ...
    def __contains__(self, version: Version) -> bool: ...
    def __init__(self, spec: str) -> None: ...
    def _intersection(
        self, l1: Sequence[Restriction], l2: Sequence[Restriction]
    ) -> List[Restriction]: ...
    @classmethod
    def fromstring(cls, spec: str) -> "VersionRange": ...
    @classmethod
    def from_version(cls, version: Version) -> "VersionRange": ...
    def match_version(self, versions: Iterable[Version]) -> Union[Version, None]: ...
    def restrict(self, version_range: "VersionRange") -> "VersionRange": ...
